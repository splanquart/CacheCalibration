#ifndef ALPACADRIVER_H
#define ALPACADRIVER_H

#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPUpdateServer.h>
#include <WiFiUdp.h>
#include <ArduinoJson.h>
#include "RelayController.h"

#define DISCOVERY_PORT 32227 // port ASCom discovery
#define ALPACA_PORT 11111 // port ASCom HTTP port


class AlpacaDriver {
public:
  AlpacaDriver(RelayController* controller, int deviceId);

  void begin();
  void handleClient();
  void handlerNotFound();
  void handleDiscovery();

  /*
   * Implement the 3 routes about Alpaca management API
   * https://ascom-standards.org/api/?urls.primaryName=ASCOM%20Alpaca%20Management%20API#/
   */
  void handleAPIVersions();
  void handleDescription();
  void handleConfiguredDevices();


  void handleGetDevices();

  /*
   * Implement routes about Alpaca device API
   * https://ascom-standards.org/api/?urls.primaryName=ASCOM%20Alpaca%20Device%20API#/
   */
  void handleConnected();
  void handleDescriptionGet();
  void handleNameGet();
  void handleDriverinfoGet();
  void handleDriverversionGet();
  void handleInterfaceVersionGet();

  void handleMaxswitchGet();
  void handleSupportedactionsGet();
  void handleCanwritesGet();
  void handleSwitchnameGet();
  void handleSwitchGet();
  void handleSwitchdescriptionGet();
  void handleSwitchvalueGet();
  void handleMaxswitchvalueGet();
  void handleMinswitchvalueGet();
  void handleSwitchstepGet();
  void handleSwitchvaluePut();
  void handleSwitchnamePut();
  void handleSwitchPut();

  /*
   * Implement route about Alapaca setup
   * https://ascom-standards.org/api/?urls.primaryName=ASCOM%20Alpaca%20Management%20API#/HTML%20Browser%20User%20Interface
   */
  void handleSetup();
  void handleSetupdevice();
  
private:
  RelayController* _controller;
  int _deviceId;
  WiFiUDP _udp;
  //WiFiServer _server;
  ESP8266WebServer _server;
  char _packetBuffer[255]; //buffer to hold incoming packet
  uint32_t _serverTransactionID = 0;
  
  
  // Alpaca properties
  //const char* _content_type = "application/json;charset=utf-8";
  const char* _content_type = "application/json";
  const char* _content_type_html = "text/html; charset=UTF-8";
  const char* _deviceName = "Cache Calibration Controller";
  const char* _description = "Controls a relay board for Cache Calibration";
  const char* _manufacturer = "My Company";
  const char* _driverVersion = "v1.0.0";
  const int _interfaceVersion = 1;
  const char* _alpacaUniqueId = "mycompany.cachecalibrationcontroller";
  const char* _alpacaDeviceType = "Switch";
  //const char* _uniqueId = "ASW-c47773faa9a94638bb22abaf6e3c4aa6";  // generated by `python uniqueid.py`
  //const char* _uniqueId = "4431281c-8560-4ad7-982f-5a6e507dda20";  // random
  const char* _uniqueId = "4431281c85604ad7982f5a6e507dda20";  // random

  void returnResponse(DynamicJsonDocument val);
  void returnBoolValue(bool val, String errMsg, int errNr);
  void returnStringValue(String val, String errMsg, int errNr);
  void returnIntValue(int val, String errMsg, int errNr);
  void returnNothing(String errMsg, int errNr);
  String getArgCaseInsensitive(const String& argName);
  String getHTTPMethodName();
  void logRequest(const String& callerName);

};

#endif // ALPACADRIVER_H
